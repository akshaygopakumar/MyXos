breakpoint; //for debugging
alias physicalSP S0;
alias sysCallNo S1;
alias i S2;
alias basic_block S4;
alias filename S5;
alias returnvalue S7;
////////////////////////////////////////////////////////////////////////////////////////////////
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); //calculated the PhysicalSP         /
sysCallNo = [physicalSP-1]; //calculate the system call No 									   /
filename = [physicalSP-3]; //determine the filename											   /
returnvalue = physicalSP-2; //Return address												   /
////////////////////////////////////////////////////////////////////////////////////////////////

//	CREATE System Call
if(sysCallNo==1) then
	alias disk_free_entry S6;
	i=FAT;
	while ( i < 3071 ) do
		if ([i]==filename) then //the file already exists
			[returnvalue]=0;
			ireturn;
			break;
		endif;
	i=i+8;
	endwhile;
	i=DISK_LIST; //Disk Free list constant
	//Checking if there is free disk space
	while (i < 3519 ) do 
		if([i]==0) then
			basic_block=i-3072;
			disk_free_entry=i;
			break;
		endif;
		i=i+1;
	endwhile;
	if (i==3519) then
		[returnvalue]=-1;
		ireturn;
	endif;
	breakpoint;
	// Modifying the fat entry
	i=FAT+2;
	while ( i < 3071 ) do
		if ([i]==-1) then
			[i-1]=0;
			[i-2]=filename;
			[i]=basic_block;
			break;
		endif;
	i=i+8;
	endwhile;
	if (i>=3071) then
		[returnvalue]=-1;
		ireturn;
	endif;
	//scratch_pad
	i=512;
	load(1,basic_block); //load the basic block to memory
	while (i<1023) do
		[i]=-1;
		i=i+1;
	endwhile;	
	store(1,basic_block); //store it back to disk
	[disk_free_entry]=1;
	store(5,19); 	
	store(6,20);
	[returnvalue]=0;
	ireturn;
endif;
if (sysCallNo == 4) then
	//DELETE System call
	i=0;
	alias Basic_Block S6;
	alias Fat_Index S3;
	alias j S10;
	alias DATA_BLOCK S11;
	while (i  < 64 ) do
		if ( [i*8 + FAT] ==filename ) then
			Fat_Index = i;
			break;
		else 
			i = i + 1;
		endif;
	endwhile;
	if ( i == 64 ) then
		[returnvalue]=-1;
		ireturn;
	endif;
	i = 0;
	while ( i < 64 ) do
		if ( [FILE_TABLE + i*2] == Fat_Index ) then
				[returnvalue] = -1;
				ireturn;
		else
			i = i + 1 ;
		endif;
	endwhile;
	Basic_Block = [ FAT + Fat_Index * 8 + 2 ];
	load ( 1 ,Basic_Block ); //load the basic Block to the scratchpad
	i = 0;
	while ( i < 256 ) do
		DATA_BLOCK = [ SCRATCHPAD + i ] ;  // The Data block number
		if ( DATA_BLOCK != -1 ) then
			load ( 1, DATA_BLOCK ); 		    // Load it into the scratch_pad	
			j = 512 ;						    // Make every entry to an empty string
			while ( j < 1023) do
				[j] = "";
				j = j + 1;
			endwhile;
			store ( 1 , DATA_BLOCK );			// Store the datablock back to disk
			[ DISK_LIST + DATA_BLOCK ] = 0;			// Set disk_free_entry to 0 (unused)
		endif;
		load ( 1 , Basic_Block );			// Load the Basic_Block back to scratch_pad 
		i = i + 1;							// Increment i for the next data_block
	endwhile;
	load ( 1 , Basic_Block );				// Load the Basic_Block to make it empty
	i = 512;								// Set the basic_block to 0
	while ( i < 1023) do
		[i] = "";
		i = i + 1;
	endwhile;
	store ( 1 , Basic_Block );				// Store the basic_block back to disk
	[DISK_LIST + Basic_Block]= 0;			// Set disk_free_entry of basic_block to zero
	[ FAT + Fat_Index * 8 + 2 ] = -1 ;		// Invalidate the Fat_Entry by setting basic block to -1
	[ FAT + Fat_Index * 8] = -1 ;			// Set File_Name entry to -1
	store(5,19); 							// Store the FAT and disk_free_entry to -1
	store(6,20);							
	[returnvalue]=0;
	ireturn;
endif;	
	
		
		
		
		
	 
		
			
