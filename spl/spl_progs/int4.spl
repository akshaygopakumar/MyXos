//IMPLEMENTING THE WRITE SYSTEM CALL
alias physicalSP S0;
alias sysCallNo S1;
alias i S2;
alias returnvalue S3;
alias Fat_Entry S4;
alias PI S5;
alias PCB S6;
alias fileDescriptor S7;
alias wordToWrite S8;	
alias LSEEK_POSITION S9;
alias Basic_Block S10;
alias System_Table_Index S11;
alias dataBlock S12;
//calculating the Process_Id
PI = (PTBR-1024)/8;
//calculating the PCB
PCB = READY_LIST + 32 * PI;
physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512); 	// Calculated the PhysicalSP
sysCallNo = [physicalSP-1]; 								// Calculate the system call No 
returnvalue = physicalSP-2;								 	// Return address
wordToWrite = [physicalSP - 3]; 								// The word to write 
fileDescriptor = [physicalSP - 4];							// The file descriptor of the open file instance.
//..............................................IMPLEMENTATION...........................................................\\

// Checking if the file descriptor is valid............................//

if (fileDescriptor < 0 ) then
		[returnvalue] = -1;
		ireturn;
endif;
if (fileDescriptor > 7 ) then
	[returnvalue] = -1;
	ireturn;
endif;
//......................................................................//

//.............Indexing into the pointer to the SWOpen table............//


System_Table_Index= [PCB + 15 + fileDescriptor*2];
if ( System_Table_Index == -1) then
	[returnvalue] = -1;
	ireturn;
else						
	LSEEK_POSITION = [PCB + 15 + fileDescriptor*2 + 1] ;
endif;
//......................................................................//

//..............Calculating the FAT Entry...............................//
Fat_Entry = [FILE_TABLE + System_Table_Index * 2 ];
Basic_Block = [ FAT + Fat_Entry * 8 + 2 ];
load ( 1 , Basic_Block );       // Load the Basic_Block into the scratchpad
//......................................................................//

//..............The Actual Process......................................//
dataBlock = [SCRATCHPAD + LSEEK_POSITION/512]; 		// This is the data block where the actual data writing takes place
if ( dataBlock == -1 ) then
	i=DISK_LIST; 									//Disk Free list constant
	while (i < 3519 ) do 							//Checking if there is free disk space
		if([i]==0) then
			[i]=1;
			break;
		endif;
		i=i+1;
	endwhile;
	if ( i == 3519 ) then
		[returnvalue]=-1;
		ireturn;
	endif;
	[SCRATCHPAD + LSEEK_POSITION/512]=i-DISK_LIST;
	dataBlock = i-DISK_LIST;
	store( 1 , Basic_Block );
	[ FAT + Fat_Entry * 8 + 1 ] = [ FAT + Fat_Entry * 8 + 1 ] + 512 ; 
	store(5,19); 									// Store the FAT and disk_free_entry to
	store(6,20);
endif;
load ( 1, dataBlock);
[SCRATCHPAD + LSEEK_POSITION%512] = wordToWrite;	// Writing the word to the offset
store ( 1 , dataBlock );							// Storing the data block to the disk
[PCB + 15 + fileDescriptor*2 + 1] = LSEEK_POSITION + 1;  // Incrementing the LSEEK entry
[returnvalue]=0;
ireturn;

 
